 INFO  server::exe > Server listen on 0.0.0.0:50051
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_read  > received frame=GoAway { error_code: NO_ERROR, last_stream_id: StreamId(0) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), header_table_size: 0, enable_push: 0, initial_window_size: 2147483647 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 2147418112 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG server::service         > received: 1000 Byte
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Reset { stream_id: StreamId(1), error_code: CANCEL } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_read  > received frame=GoAway { error_code: NO_ERROR, last_stream_id: StreamId(0) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::proto::connection   > Connection; peer=Server
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_write > send frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::codec::framed_read  > received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } 
 DEBUG h2::codec::framed_write > send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 } 
 DEBUG h2::codec::framed_read  > received frame=Settings { flags: (0x1: ACK) } 
 DEBUG h2::proto::settings     > received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384 } 
 DEBUG h2::codec::framed_read  > received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_read  > received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) } 
 INFO  server::service         > Request in: helloworld
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } 
 DEBUG h2::codec::framed_write > send frame=Data { stream_id: StreamId(1) } 
 DEBUG h2::codec::framed_write > send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } 
 DEBUG h2::codec::framed_read  > received frame=GoAway { error_code: NO_ERROR, last_stream_id: StreamId(0) } 
