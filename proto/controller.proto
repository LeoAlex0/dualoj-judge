syntax = "proto2";

package dualoj.controller;

message Chunk { required bytes Content = 1; }

enum StatusCode {
    Unknown = 0;
    Ok      = 1;
    Failed  = 2;
}

message EchoMsg { required string Message = 1; }

message ID { required string Content = 1; }

message UpbuildMsg {
    oneof MsgOrReturn {
        string     Stdout   = 1;
        string     Stderr   = 2;
        ID    Complete = 3;
        StatusCode Code     = 255;
    }
}

message NewJobResponse {
    oneof Result {
        string  ErrorMsg = 1;
        ID JobUID   = 2;
    }
    required StatusCode Code = 255;
}

message JudgeLimit {
    // CPU limit (in mili-cpu)
    required uint32 CPU = 1;
    // Memory Limit (in MiB)
    required uint32 Memory = 2;
    // TimeLimit (in second)
    required uint32 Time = 3;
}

message JudgeRequest {
    required ID    Judged = 1;
    required ID    Judger = 2;
    required JudgeLimit Limit  = 3;
}

message JobCreatedMsg { required string JobUID = 1; }

message JobExitMsg {
    enum Code {
        Accepted    = 1;
        WrongAnswer = 2;

        MemoryLimitExceeded = 125;
        TimeLimitExceeded   = 126;
        RuntimeError        = 127;
        Abort               = 128;

        Other = 255;
    };
    required Code   JudgeCode = 255;
    optional string OtherMsg  = 1;
}
message JobErrorMsg { required string Msg = 1; }

message JudgeEvent {
    oneof Event {
        JobCreatedMsg Created = 1;
        JobExitMsg    Exit    = 254;
        JobErrorMsg   Error   = 255;
    }
}

service Controller {
    rpc Echo( EchoMsg ) returns ( EchoMsg );
    rpc Upbuild( stream Chunk ) returns ( stream UpbuildMsg );
    // Just For Test Internal Registry & K8s
    rpc NewJob( ID ) returns ( NewJobResponse );
    rpc Judge( JudgeRequest ) returns ( stream JudgeEvent );
}
